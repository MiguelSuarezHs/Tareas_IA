# -*- coding: utf-8 -*-
"""Taller_en_clase_Intro_a_la_probabilidad_para_ML_estudiante.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/github/Mardugo/ClaseMachineLearning/blob/main/Taller_en_clase_Intro_a_la_probabilidad_para_ML_estudiante.ipynb

# Taller en clase #1 
Generando numeros aleatorios en ptython.
Objetivos:
1. Familiarizar al estudiante con la generación de numeros aleatorios de diferentes distribuciones en python.
2. Usar las herramientas de python de manejo de arreglos.
3. Usar las herramientas de generación de gráficas de python.
## Entrega
En U-virtual, antes de la siguiente clase en el link designado como Taller en clase 1.
"""

import numpy  #as np# si no lo tiene instalado por favor correr en su consola         $pip install numpy
import scipy #as sp# si no lo tiene instalado por favor correr en su consola         $pip install scipy
import matplotlib #si no lo tiene instalado por favor correr  en su consola   $pip install matplotlib
import matplotlib.pyplot as plt

"""## Primer punto Distribuciones discretas.
1. Cree un arreglo de N muestras con N a su selección, pero mayor a 1000, de números distribuidos con las correspondientes distribuciones, para cada arreglo de números: 
1. Grafique los números aleatorios, 
2. Ordene de menor a mayor y grafique,
4. Encuentre los valores teoricos de media y varianza, y comparelos con los estimados.
"""

#Para todas las simulaciones:
N=100000
m=300
numpy.random.seed(seed=2**32 - 1)#Para fijar una semilla para los experimentos y que los numeros generados siempre sean los mismos en cada corrida completa de este fuente.

# bernoulli con cierto p entre 0 y 1
p=0.3
from scipy.stats import bernoulli
mean, var, skew, kurt = bernoulli.stats(p, moments='mvsk')
print("mean:", mean, "variance:",var, "skewness:",skew,"kurtosis", kurt)
r = bernoulli.rvs(p, size=N)
#ver https://docs.scipy.org/doc/scipy-0.14.0/reference/stats.html
plt.plot(r)
plt.title(str(N)+" puntos distribuidos bernoulli con p="+str(p))
plt.show()
print(r.argmax())
r.sort()
plt.plot(r)
plt.title(str(N)+" puntos distribuidos bernoulli ordenados con p="+str(p))
plt.show()

plt.hist(r, bins = m)
plt.title("Histograma de los "+str(N)+" puntos distribuidos bernoulli con p="+str(p))
plt.show()
print("Note que hasta ahora no sabemos el tipo de nuestro arreglo r:")
print(type(r))
print("Vamos a hallar algunas estimaciones de estadisticas de r")
# ver https://numpy.org/doc/stable/reference/routines.statistics.html 
avg=r.mean()
varest=r.var()
print("Los valores teoricos de la media y varianza para la bernoulli con p=",p,"son u=" ,mean,"var=",var)
print("Los valores estimados en nuestro experimento de la media y varianza para la bernoulli con p=",p,"son u_est=" ,avg,"var_est=",varest)

# binomial con cierto p entre 0 y 1 y cierto n
N1=100000
m1=100


n1,p1 = 10, 0.5
from scipy.stats import binom
mean1, var1, skew1, kurt1 = binom.stats(n1, p1, moments='mvsk')
print("media:", mean1, "varianza:", var1, "asimetría:", skew1, "curtosis:", kurt1)
r1= binom.rvs(n1, p1, size=N)
plt.plot(r1)
plt.title(str(N)+ " puntos distribuidos Binomial con p= " + str(p1) + " y n= " + str(n1))
plt.show()

r1.sort()
plt.plot(r1)
plt.title(str(N1)+" puntos distribuidos Binomial ordenados con p="+str(p1)+ " y n= "+ str(n1))
plt.show()


plt.hist(r1, bins=m1)
plt.title("Histograma de los "+str(N1)+" puntos distribuidos binomial con p="+str(p1) + " y n= "+ str(n1))
plt.show()

#valores estimados vs teóricos 
media_estimada1=r1.mean()
varianza_estimada1=r1.var()
print( "Valores teóricos vs estimados de distribución binomial con p=", p1, "y n=", n1)
print("Varianza teórica=", var1, "media teórica=", mean1)
print("Varianza estimada=", varianza_estimada1, "media estimada=", media_estimada1)


# Geométrica con cierto p entre 0 y 1

N2=100000
m2=100

p2 = 0.3

from scipy.stats import geom
mean2, var2, skew2, kurt2 = geom.stats(p2, moments='mvsk')
print("media:", mean2, "varianza:", var2, "asimetría:", skew2, "curtosis:", kurt2)
r2= geom.rvs(p2, size=N2)
plt.plot(r2)
plt.title(str(N2)+ " puntos distribuidos Geometrica con p= " + str(p2))
plt.show()

r2.sort()
plt.plot(r2)
plt.title(str(N2)+" puntos distribuidos Geometrica ordenados con p="+str(p2))
plt.show()


plt.hist(r2, bins=m2)
plt.title("Histograma de los "+str(N2)+" puntos distribuidos Geometrica con p="+str(p2))
plt.show()

#valores estimados vs teóricos 
media_estimada2=r2.mean()
varianza_estimada2=r2.var()
print( "Valores teóricos vs estimados de distribución binomial con p=", p2)
print("Varianza teórica=", var2, "media teórica=", mean2)
print("Varianza estimada=", varianza_estimada2, "media estimada=", media_estimada2)


# Poisson con cierto Lamnda L
L = 5
N3=100000
m3=100


from scipy.stats import poisson
mean3, var3, skew3, kurt3 = poisson.stats(L, moments='mvsk')
print("media:", mean3, "varianza:", var3, "asimetría:", skew3, "curtosis:", kurt3)
r3= poisson.rvs(L, size=N3)
plt.plot(r3)
plt.title(str(N3)+ " puntos distribuidos Poisson con L= " + str(L))
plt.show()

r3.sort()
plt.plot(r3)
plt.title(str(N3)+" puntos distribuidos Poisson ordenados con L="+str(L))
plt.show()


plt.hist(r3, bins=m3)
plt.title("Histograma de los "+str(N3)+" puntos distribuidos Poisson con L="+str(L))
plt.show()

#valores estimados vs teóricos 
media_estimada3=r3.mean()
varianza_estimada3=r3.var()
print( "Valores teóricos vs estimados de distribución Poisson con L=", L)
print("Varianza teórica=", var3, "media teórica=", mean3)
print("Varianza estimada=", varianza_estimada3, "media estimada=", media_estimada3)



#Binomial negativa con parametro p después de n fallos
N4=100000
m4=100


n4,p4 = 10, 0.5
from scipy.stats import nbinom
mean4, var4, skew4, kurt4 = nbinom.stats(n4, p4, moments='mvsk')
print("media:", mean4, "varianza:", var4, "asimetría:", skew4, "curtosis:", kurt4)
r4= binom.rvs(n4, p4, size=N4)
plt.plot(r4)
plt.title(str(N4)+ " puntos distribuidos Binomial con p= " + str(p4) + " y n= " + str(n4))
plt.show()

r4.sort()
plt.plot(r4)
plt.title(str(N4)+" puntos distribuidos bernoulli ordenados con p="+str(p4 )+ " y n= "+ str(n4))
plt.show()


plt.hist(r4, bins=m4)
plt.title("Histograma de los "+str(N4)+" puntos distribuidos binomial con p="+str(p4) + " y n= "+ str(n4))
plt.show()

#valores estimados vs teóricos 
media_estimada4=r4.mean()
varianza_estimada4=r4.var()
print( "Valores teóricos vs estimados de distribución binomial con p=", p4, "y n=", n4)
print("Varianza teórica=", var4, "media teórica=", mean4)
print("Varianza estimada=", varianza_estimada4, "media estimada=", media_estimada4)


"""## Segundo punto Distribuciones contínuas.

"""

#Para todas las simulaciones:
N5=10000
m5=300
numpy.random.seed(seed=1314926535)#Para fijar una semilla para los experimentos y que los numeros generados siempre sean los mismos en cada corrida completa de este fuente.

# Normal de media 5 y desviación estandar 0.5
u=5
std=0.5
from scipy.stats import norm
mean, var, skew, kurt = norm.stats(moments='mvsk',loc=u,scale=std)
r = norm.rvs (loc=u,scale=std, size=N)
#ver https://docs.scipy.org/doc/scipy-0.14.0/reference/stats.html
plt.plot(r)
plt.title(str(N5)+" puntos distribuidos normales con media="+str(u)+" y std="+str(std))
plt.show()

r.sort()
plt.plot(r)
plt.title(str(N5)+" puntos distribuidos normales ordenados")
plt.show()


plt.hist(r, bins = m5)
plt.title("Histograma de los "+str(N5)+" puntos distribuidos normales con u="+str(u)+ " y std= "+str(std))
plt.show()
print("Note que hasta ahora no sabemos el tipo de nuestro arreglo r:")
print(type(r))
print("Vamos a hallar algunas estimaciones de estadisticas de r")
# ver https://numpy.org/doc/stable/reference/routines.statistics.html 
avg=r.mean()
varest=r.var()
print("Los valores teoricos de la media y varianza para la normal son u=" ,mean,"var=",var)
print("Los valores estimados en nuestro experimento de la media y varianza son u_est=" ,avg,"var_est=",varest)

# Uniforme entre 0 y 255
from scipy.stats import uniform 
mean5, var5, skew5, kurt5 = uniform.stats(moments='mvsk')
r5=uniform.rvs(loc=0, scale=255, size=N5)

plt.plot(r5)
plt.title(str(N5)+" puntos distribuidos uniformemente entre 0 y 255")
plt.show()

r5.sort()
plt.plot(r5)
plt.title(str(N5)+" puntos distribuidos uniformes ordenados")
plt.show()


plt.hist(r5, bins=m5)
plt.title("Histograma de los "+str(N5)+" puntos distribuidos uniformemente  entre 0 y 255")
plt.show()

#valores estimados vs teóricos 
media_estimada5=r5.mean()
varianza_estimada5=r5.var()
print( "Valores teóricos vs estimados de distribución iniforme")
print("Varianza teórica=", var5, "media teórica=", mean5)
print("Varianza estimada=", varianza_estimada5, "media estimada=", media_estimada5)


# Exponencial con Lamnda L
L=0.3
from scipy.stats import expon 
mean6, var6, skew6, kurt6 = expon.stats(moments='mvsk')
r6=expon.rvs(size=N5)

plt.plot(r6)
plt.title(str(N5)+" puntos distribuidos exponecialmete con Lamnda= "+str(L))
plt.show()

r6.sort()
plt.plot(r6)
plt.title(str(N5)+" puntos distribuidos exponencialmente ordenados")
plt.show()


plt.hist(r6, bins=m5)
plt.title("Histograma de los "+str(N5)+" puntos distribuidos exponencialmete")
plt.show()

#valores estimados vs teóricos 
media_estimada6=r6.mean()
varianza_estimada6=r6.var()
print( "Valores teóricos vs estimados de distribución exponencial")
print("Varianza teórica=", var6, "media teórica=", mean6)
print("Varianza estimada=", varianza_estimada6, "media estimada=", media_estimada6)




#Chi cuadrada con K grados de libertad
K=3.0
from scipy.stats import chi2 
mean7, var7, skew7, kurt7 = chi2.stats(K, moments='mvsk')
r7=chi2.rvs(K, size=N5)

plt.plot(r7)
plt.title(str(N5)+" puntos distribuidos Chi cuadrada con K= "+str(K))
plt.show()

r6.sort()
plt.plot(r7)
plt.title(str(N5)+" puntos distribuidos Chi cuadrada ordenados")
plt.show()


plt.hist(r7, bins=m5)
plt.title("Histograma de los "+str(N5)+" puntos distribuidos Chi cuadrada")
plt.show()


#valores estimados vs teóricos 
media_estimada7=r7.mean()
varianza_estimada7=r7.var()
print( "Valores teóricos vs estimados de distribución Chi cuadrada")
print("Varianza teórica=", var7, "media teórica=", mean7)
print("Varianza estimada=", varianza_estimada7, "media estimada=", media_estimada7)



#Gamma con parametros k y theta t
k,t=2.54,0.43
theta=1/t
from scipy.stats import gamma 
mean8, var8, skew8, kurt8 = gamma.stats(k, moments='mvsk')
r8=gamma.rvs(k, scale=theta, size=N5)

plt.plot(r8)
plt.title(str(N5)+" puntos distribuidos Gamma con k= "+str(k))
plt.show()

r6.sort()
plt.plot(r8)
plt.title(str(N5)+" puntos distribuidos Gamma ordenados")
plt.show()


plt.hist(r8, bins=m5)
plt.title("Histograma de los "+str(N5)+" puntos distribuidos Gamma")
plt.show()

#valores estimados vs teóricos 
media_estimada8=r8.mean()
varianza_estimada8=r8.var()
print( "Valores teóricos vs estimados de distribución Gamma")
print("Varianza teórica=", var8, "media teórica=", mean8)
print("Varianza estimada=", varianza_estimada8, "media estimada=", media_estimada8)

